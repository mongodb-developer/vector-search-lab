{"searchDocs":[{"title":"üëê Setup dev environment","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/dev-env/dev-env-setup","content":"üëê Setup dev environment tip In this lab, we will be using Jupyter Notebooks, which is an interactive Python environment. If you are new to Jupyter Notebooks, use this guide to familiarize yourself with the environment. You have a few different options to run this lab. Our preferred platform is Instruqt. If for some reason, you are unable to access the lab through Instruqt, try GitHub Codespaces. If neither of these work, or if you really, really, really want a local installation, only then run the lab locally. InstruqtGitHub CodespacesLocal Instruqt is a lab platform that provides cloud-based sandboxes which come pre-configured with all the tools you need to run this lab. Navigate to the Instruqt lab using this link. Fill out the form that appears and click Submit and access. Click Start to launch the lab environment. You should see a screen with a purple progress bar indicating that Instruqt is preparing a sandbox with all the required libraries for this lab and a MongoDB cluster. Once this is done, you should see a Start button at the bottom right of the screen. Click this to enter the lab. Connect to the MongoDB cluster‚Äã Let's first connect to the MongoDB cluster that was created for you. This will allow you to view data we import into the cluster later in the lab, directly from the VSCode IDE. To do this, click the leaf icon in the left navigation bar of the IDE. This is MongoDB's VSCode extension. Under Connections, click the Local MongoDB Atlas connection. This should automatically establish a connection to the local MongoDB cluster running on port 27017. If the connection was successful, you should see a green leaf and a &quot;connected&quot; message appear around the Local MongoDB Atlas connection. You will also see the default databases in the cluster appear under Connections. Any additional databases we create during the lab will also appear here. Jupyter Notebook setup‚Äã You will be filling code in a Jupyter Notebook during this lab, so let's get set up with that next! Within the sandbox, click on the files icon in the left navigation bar of the IDE. In the Explorer menu, navigate to genai-devday-notebooks &gt; labs &gt; vector-search-lab.ipynb to open the Jupyter Notebook for this lab. Next, select the Python interpreter by clicking Select Kernel at the top right of the IDE. In the modal that appears, click Python environments... and select the interpreter that is marked as Recommended or Global Env. That's it! You're ready for the lab! tip Notice that this documentation website is also linked in the Vector Search Lab Instructions tab of your Instruqt sandbox. Feel free to access the documentation from there instead for the rest of the lab.","keywords":"","version":"Next"},{"title":"üìò Running Jupyter Notebooks","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/dev-env/jupyter-notebooks","content":"","keywords":"","version":"Next"},{"title":"Cells‚Äã","type":1,"pageTitle":"üìò Running Jupyter Notebooks","url":"/vector-search-lab/docs/dev-env/jupyter-notebooks#cells","content":" Cells in a Jupyter notebook are a modular unit of code or text that you can execute and view outputs for.  ","version":"Next","tagName":"h2"},{"title":"Running a cell‚Äã","type":1,"pageTitle":"üìò Running Jupyter Notebooks","url":"/vector-search-lab/docs/dev-env/jupyter-notebooks#running-a-cell","content":" To run a cell in a Jupyter notebook, hover over it and click the Run icon that appears against the cell.    When a cell is running, you will see a loading spinner in the bottom left corner of the cell.    ","version":"Next","tagName":"h2"},{"title":"Successful cell runs‚Äã","type":1,"pageTitle":"üìò Running Jupyter Notebooks","url":"/vector-search-lab/docs/dev-env/jupyter-notebooks#successful-cell-runs","content":" When a cell is finished running successfully, you will see a green check mark appear in the bottom left corner of the cell.    ","version":"Next","tagName":"h2"},{"title":"Erroneous cell runs‚Äã","type":1,"pageTitle":"üìò Running Jupyter Notebooks","url":"/vector-search-lab/docs/dev-env/jupyter-notebooks#erroneous-cell-runs","content":" If an error occurred while running a cell, you will see a red cross appear in the bottom left corner of the cell, and also an error traceback after the cell.    To fix errors, you may need to update previous cells. If you do, re-run all the cells following the one(s) you updated.  ","version":"Next","tagName":"h2"},{"title":"Interrupting a cell‚Äã","type":1,"pageTitle":"üìò Running Jupyter Notebooks","url":"/vector-search-lab/docs/dev-env/jupyter-notebooks#interrupting-a-cell","content":" To interrupt a running cell, click the Stop icon that you see against the cell while it is running.    warning The UI might differ slightly if you are running Jupyter Notebooks in a different IDE. Refer to the appropriate documentation if running the notebook in a different environment. ","version":"Next","tagName":"h2"},{"title":"üëê Import data into MongoDB","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/import-data/import-data","content":"üëê Import data into MongoDB Let's first import a dataset to use for this lab. We will use a collection of books. Run the cells under the Step 2: Import data into MongoDB section in the notebook to import the dataset for this lab into a MongoDB collection. To visually verify that the data has been imported into the MongoDB cluster, click the leaf icon in the left navigation bar of the IDE. Ensure that you see a database called mongodb_genai_devday_vs, and a collection named books under it. Click the &gt; arrow next to books and note the number of documents. To preview a document, click the &gt; arrow next to Documents and select a document from the list.","keywords":"","version":"Next"},{"title":"üëê Setup prerequisites","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/dev-env/setup-pre-reqs","content":"","keywords":"","version":"Next"},{"title":"Expired passkey OR don't have a passkey‚Äã","type":1,"pageTitle":"üëê Setup prerequisites","url":"/vector-search-lab/docs/dev-env/setup-pre-reqs#expired-passkey-or-dont-have-a-passkey","content":" Passkeys are provided to you at MongoDB Developer Days to easily get API keys for LLM and embedding APIs that are used in the workshop. These passkeys are valid for 3 days after the workshop.  Once the passkey expires, or if you weren't at a MongoDB Developer Day recently, you will need to obtain the following API keys for the workshop:  VoyageAI  Follow the steps here to obtain a Voyage AI API key.Set the VOYAGE_API_KEY environment variable in the notebook as follows:  os.environ[&quot;VOYAGE_API_KEY&quot;] = &quot;your-voyageai-api-key&quot;   ","version":"Next","tagName":"h3"},{"title":"If you are running the lab locally‚Äã","type":1,"pageTitle":"üëê Setup prerequisites","url":"/vector-search-lab/docs/dev-env/setup-pre-reqs#if-you-are-running-the-lab-locally","content":" If you aren't using Instruqt or GitHub Codespaces to run the lab and instead running it locally, you will need to do the following additional steps:  Spin up a free MongoDB Atlas cluster and obtain its connection string: Register for a free MongoDB Atlas account if you don't already have oneCreate a new database clusterObtain the connection string for your database cluster Set the MONGODB_URI variable in the notebook as follows:  MONGODB_URI = &quot;your_connection_string&quot;  ","version":"Next","tagName":"h3"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/intro","content":"Introduction Lab goals\tGo from a vector search beginner to proWhat you'll learn\tWhat is vector search? How vector search works Perform vector search queries using Mongo Atlas Vector Search Ways to optimize your vector search queries Time to complete\t90 mins In the navigation bar and in some pages, you will notice some icons. Here is their meaning: Icon\tMeaning\tDescriptionüìò\tLecture material\tIf you are following along in an instructor-led session, they probably have covered this already. üëê\tHands-on content\tGet ready to do some hands-on work. You should follow these steps. üìö\tDocumentation\tReference documentation for hands-on portions of the lab. ü¶π\tAdvanced content\tThis content isn't covered during the lab, but if you're interested in learning more, you can check it out.","keywords":"","version":"Next"},{"title":"üìò Embeddings","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/key-concepts/embeddings","content":"","keywords":"","version":"Next"},{"title":"Vector‚Äã","type":1,"pageTitle":"üìò Embeddings","url":"/vector-search-lab/docs/key-concepts/embeddings#vector","content":" A vector is an array of numbers that represent magnitude and direction in a multi-dimensional space.  ","version":"Next","tagName":"h2"},{"title":"Embeddings‚Äã","type":1,"pageTitle":"üìò Embeddings","url":"/vector-search-lab/docs/key-concepts/embeddings#embeddings","content":"   Embeddings are vectors that represent a piece of information, such as text, images, audio, video etc. Embeddings capture semantic qualities of the data i.e. characteristics that capture the meaning or essence of it.  This way, if you plot data in this multi-dimensional vector space, semantically similar data, or data with similar meaning ends up close to each other.  ","version":"Next","tagName":"h2"},{"title":"Embedding models‚Äã","type":1,"pageTitle":"üìò Embeddings","url":"/vector-search-lab/docs/key-concepts/embeddings#embedding-models","content":"   Embedding models are specialized machine learning models that have been trained to convert a piece of information to these numerical encodings.  The embedding model you choose determines the number of elements in the embedding vectors, and consequently the number of dimensions required to represent them in vector space.  Embedding models vary depending on how the model was trained. Therefore, different models offer different advantages depending on your data and use case. While text embedding models are widely used, embedding models also exist for other types of data such as images, audio, and multimodal content. ","version":"Next","tagName":"h2"},{"title":"üëê Vector quantization","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/optimizing-vector-search/vector-quantization","content":"üëê Vector quantization Vector quantization is a technique to reduce the number of bits required to represent a vector. This can help reduce the storage and memory requirements for vector embeddings. To enable vector auto-quantization on your embeddings, simply set the quantization field to one of the supported quantization types (scalar or binary) in the vector search index definition. Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 8: Enable vector quantization section in the notebook to enable auto-quantization on your embeddings. The answers for code blocks in this section are as follows: CODE_BLOCK_14 Answer { &quot;name&quot;: ATLAS_VECTOR_SEARCH_INDEX_NAME, &quot;type&quot;: &quot;vectorSearch&quot;, &quot;definition&quot;: { &quot;fields&quot;: [ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;: 1024, &quot;similarity&quot;: &quot;cosine&quot;, &quot;quantization&quot;: &quot;scalar&quot;, }, ] }, } ","keywords":"","version":"Next"},{"title":"üìò Atlas Search","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/other-search-techniques/atlas-search","content":"","keywords":"","version":"Next"},{"title":"Usage Example‚Äã","type":1,"pageTitle":"üìò Atlas Search","url":"/vector-search-lab/docs/other-search-techniques/atlas-search#usage-example","content":" { &quot;$search&quot;: { &quot;index&quot;: &quot;default&quot;, &quot;text&quot;: { &quot;query&quot;: &quot;search term&quot;, &quot;path&quot;: &quot;fieldName&quot; } } }   Refer to our documentation to learn more about Atlas Search. ","version":"Next","tagName":"h3"},{"title":"üìò Vector Search","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/key-concepts/vector-search","content":"","keywords":"","version":"Next"},{"title":"Vector search‚Äã","type":1,"pageTitle":"üìò Vector Search","url":"/vector-search-lab/docs/key-concepts/vector-search#vector-search","content":" Vector search, a.k.a. semantic search is an information retrieval technique that retrieves data based on intent or meaning.  Unlike traditional full-text search which finds keyword matches, vector search uses embeddings to find items closest to your search query in multi-dimensional vector space. The closer the embeddings are to your query, the more similar they are in meaning.  ","version":"Next","tagName":"h2"},{"title":"Vector search in MongoDB‚Äã","type":1,"pageTitle":"üìò Vector Search","url":"/vector-search-lab/docs/key-concepts/vector-search#vector-search-in-mongodb","content":" In MongoDB, you can semantically search through your data using MongoDB Atlas Vector Search.  To perform vector search on your data in MongoDB, you need to create a vector search index. An example of a vector search index definition looks as follows:  { &quot;fields&quot;:[ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;: 1024, &quot;similarity&quot;: &quot;cosine&quot; }, { &quot;type&quot;: &quot;filter&quot;, &quot;path&quot;: &quot;pages&quot; }, ... ] }   In the index definition, you specify the path to the embedding field (path), the number of dimensions in the embedding vectors (numDimensions), and a similarity metric that specifies how to determine nearest neighbors in vector space (similarity). You can also index filter fields that allow you to pre-filter on certain metadata to narrow the scope of the vector search.  Vector search in MongoDB takes the form of an aggregation pipeline stage. It always needs to be the first stage in the pipeline and can be followed by other stages to further process the semantic search results. An example pipeline including the $vectorSearch stage is as follows:  [ { &quot;$vectorSearch&quot;: { &quot;index&quot;: &quot;vector_index&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;queryVector&quot;: [0.02421053, -0.022372592,...], &quot;numCandidates&quot;: 150, &quot;filter&quot;: {&quot;pages&quot;: 100}, &quot;limit&quot;: 10 } }, { &quot;$project&quot;: { &quot;_id&quot;: 0, &quot;title&quot;: 1, &quot;score&quot;: {&quot;$meta&quot;: &quot;vectorSearchScore&quot;} } } ]   In this example, you can see a vector search query with a pre-filter. The limit field in the query definition specifies how many documents to return from the vector search.  The $project stage that follows only returns documents with the title field and the similarity score from the vector search. ","version":"Next","tagName":"h2"},{"title":"üëê Pre-filtering","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/optimizing-vector-search/pre-filtering","content":"üëê Pre-filtering Pre-filtering is a technique to optimize vector search by only considering documents that match certain criteria during vector search. Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 7: Adding pre-filters to your vector search section in the notebook to experiment with combining pre-filters with your vector search queries. The answers for code blocks in this section are as follows: CODE_BLOCK_10 Answer { &quot;name&quot;: ATLAS_VECTOR_SEARCH_INDEX_NAME, &quot;type&quot;: &quot;vectorSearch&quot;, &quot;definition&quot;: { &quot;fields&quot;: [ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;: 1024, &quot;similarity&quot;: &quot;cosine&quot;, }, {&quot;type&quot;: &quot;filter&quot;, &quot;path&quot;: &quot;year&quot;}, ] }, } CODE_BLOCK_11 Answer {&quot;year&quot;: {&quot;$gte&quot;: 2002}} CODE_BLOCK_12 Answer { &quot;name&quot;: ATLAS_VECTOR_SEARCH_INDEX_NAME, &quot;type&quot;: &quot;vectorSearch&quot;, &quot;definition&quot;: { &quot;fields&quot;: [ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;: 1024, &quot;similarity&quot;: &quot;cosine&quot;, }, {&quot;type&quot;: &quot;filter&quot;, &quot;path&quot;: &quot;year&quot;}, {&quot;type&quot;: &quot;filter&quot;, &quot;path&quot;: &quot;pages&quot;}, ] }, } CODE_BLOCK_13 Answer {&quot;$and&quot;: [{&quot;year&quot;: {&quot;$gte&quot;: 2002}}, {&quot;pages&quot;: {&quot;$lte&quot;: 250}}]} ","keywords":"","version":"Next"},{"title":"üìò find()","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/other-search-techniques/find","content":"","keywords":"","version":"Next"},{"title":"Usage Example‚Äã","type":1,"pageTitle":"üìò find()","url":"/vector-search-lab/docs/other-search-techniques/find#usage-example","content":" db.collection.find({ &quot;name&quot;: &quot;Alice&quot; })   Refer to our documentation to learn more about find(). ","version":"Next","tagName":"h3"},{"title":"üìò Lecture notes","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/optimizing-vector-search/lecture-notes","content":"","keywords":"","version":"Next"},{"title":"Adding pre-filters to vector search‚Äã","type":1,"pageTitle":"üìò Lecture notes","url":"/vector-search-lab/docs/optimizing-vector-search/lecture-notes#adding-pre-filters-to-vector-search","content":"   Pre-filtering allows you to filter the vector search results based on certain business logic, recency etc. In MongoDB, vector search pre-filtering works as follows:  First, the filters are applied to your complete corpus to produce a filtered set of documentsIf the number of filtered documents is less than the number of vectors or results to be returned, an exact nearest neighbor (ENN) search is performedIf the number of filtered documents is more than the number of documents to be returned, an approximate nearest neighbor (ANN) search is performed and when the HNSW graph is traversed, it only considers doc IDs that are present in this filtered set  This way, as long as the filters aren't too restrictive, pre-filtering can improve the latency as well as accuracy of the vector search.  To add pre-filters to vector search in MongoDB, you need to do the following:  Update the vector search index to include the appropriate filter fields, for example:  { &quot;fields&quot;:[ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;: 1024, &quot;similarity&quot;: &quot;cosine&quot; }, { &quot;type&quot;: &quot;filter&quot;, &quot;path&quot;: &quot;pages&quot; }, ... ] }   Update the $vectorSearch stage in the aggregation pipeline definition to include the pre-filters, for example:  [ { &quot;$vectorSearch&quot;: { &quot;index&quot;: &quot;vector_index&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;filter&quot;: {&quot;pages&quot;: 100}, &quot;queryVector&quot;: [0.02421053, -0.022372592,...], &quot;numCandidates&quot;: 150, &quot;limit&quot;: 10 } }, { &quot;$project&quot;: { &quot;_id&quot;: 0, &quot;Content&quot;: 1, &quot;score&quot;: {&quot;$meta&quot;: &quot;vectorSearchScore&quot;} } } ]   ","version":"Next","tagName":"h2"},{"title":"Vector quantization‚Äã","type":1,"pageTitle":"üìò Lecture notes","url":"/vector-search-lab/docs/optimizing-vector-search/lecture-notes#vector-quantization","content":" Quantization is the process of shrinking full-fidelity vectors into fewer bits. This can help reduce the storage and memory requirements for vector embeddings. MongoDB Atlas Vector Search supports two types of quantization:  scalar: Takes each vector dimension and buckets it into a smaller set of discrete integersbinary: Sets each vector dimension to a binary value based on a threshold  To enable vector auto-quantization on your embeddings, simply set the quantization field to one of the above supported quantization types in the vector search index definition, for example:  { &quot;fields&quot;:[ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;:1024, &quot;similarity&quot;: &quot;cosine&quot;, &quot;quantization&quot;: &quot;scalar&quot; }, ... ] }   Refer to our documentation to learn more about vector quantization. ","version":"Next","tagName":"h2"},{"title":"üëê Create a vector search index","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/perform-vector-search/create-vector-index","content":"üëê Create a vector search index To retrieve documents from MongoDB using vector search, you must configure a vector search index on the collection into which you ingested your data. In this lab, you will programmatically create vector search indexes using MongoDB's Python driver. Run the cells under the Step 5: Create a vector search index section in the notebook to create a vector search index on the books collection.","keywords":"","version":"Next"},{"title":"ü¶π‚Äç‚ôÄÔ∏è Hybrid Search","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/other-search-techniques/hybrid-search","content":"ü¶π‚Äç‚ôÄÔ∏è Hybrid Search You can combine Atlas Vector Search and Atlas Search queries into a hybrid search for unified results. This approach leverages the strengths of both full-text search and vector search to deliver more relevant results. Run the cells under ü¶π‚Äç‚ôÄÔ∏è Hybrid search section in the notebook to try out hybrid search in MongoDB Atlas. Refer to our documentation to learn more about this technique.","keywords":"","version":"Next"},{"title":"üëê Generate embeddings","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/perform-vector-search/generate-embeddings","content":"üëê Generate embeddings Let's imagine you're running an online bookstore and want your users to be able to search for books using vector search. Vector search allows you to search not just using text, but also other modalities such as images, audio, video etc. In this lab, you will see how to enable search using text as well as images. We will use voyage-multimodal-3, a multimodal embedding model from Voyage AI that can handle both images and text. Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 3: Generating embeddings section in the notebook to see how to embed text and images using the CLIP model. The answers for code blocks in this section are as follows: CODE_BLOCK_1 Answer vo.multimodal_embed(inputs=[[image]], model=&quot;voyage-multimodal-3&quot;) CODE_BLOCK_2 Answer embedding.embeddings[0] ","keywords":"","version":"Next"},{"title":"üéØ Summary","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/summary","content":"üéØ Summary Congratulations! Following this workshop, you have successfully learned: what is vector searchhow vector search workshow to perform vector search queries in MongoDB Atlashow to optimize your vector search queries Here are some resources to help you learn more about MongoDB Atlas Vector Search: Atlas Vector Search OverviewAtlas Vector Search DocumentationAI Learning Hub","keywords":"","version":"Next"},{"title":"üëê Add embeddings to the data","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/perform-vector-search/add-embeddings","content":"üëê Add embeddings to the data Now that you know how to generate embeddings using the CLIP model, let's add embeddings to the books dataset you previously imported into MongoDB. This is a common scenario you will run into where you might want to update your existing data in MongoDB with embeddings. Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 4: Adding embeddings to existing data in Atlas section in the notebook to add embeddings of the books' cover images to the documents in the books collection. The answers for code blocks in this section are as follows: CODE_BLOCK_3 Answer collection.find({}) CODE_BLOCK_4 Answer get_embeddings(content, &quot;image&quot;, &quot;document&quot;) CODE_BLOCK_5 Answer {&quot;$set&quot;: {embedding_field: embedding}} CODE_BLOCK_6 Answer collection.update_one(filter, update) To visually verify that embeddings have been added to the documents in the books collection, click on the leaf icon in the left navigation bar of the IDE. Navigate to a document in the books collection and ensure that it has an embedding field.","keywords":"","version":"Next"},{"title":"üëê Perform vector search queries","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/perform-vector-search/run-vector-search-queries","content":"üëê Perform vector search queries Now let's run some vector search queries against the books collection. Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 6: Perform vector search queries section in the notebook to run vector search queries against your data. The answers for code blocks in this section are as follows: CODE_BLOCK_7 Answer get_embeddings(user_query, mode, &quot;query&quot;) CODE_BLOCK_8 Answer [ { &quot;$vectorSearch&quot;: { &quot;index&quot;: ATLAS_VECTOR_SEARCH_INDEX_NAME, &quot;queryVector&quot;: query_embedding, &quot;path&quot;: &quot;embedding&quot;, &quot;numCandidates&quot;: 20, &quot;filter&quot;: filter, &quot;limit&quot;: 5, } }, {&quot;$project&quot;: {&quot;_id&quot;: 0, &quot;title&quot;: 1, &quot;cover&quot;: 1, &quot;year&quot;:1, &quot;pages&quot;:1, &quot;score&quot;: {&quot;$meta&quot;: &quot;vectorSearchScore&quot;}}}, ] CODE_BLOCK_9 Answer collection.aggregate(pipeline) ","keywords":"","version":"Next"}],"options":{"id":"default"}}