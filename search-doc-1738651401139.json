{"searchDocs":[{"title":"👐 Setup dev environment","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/getting-started/dev-env-setup","content":"","keywords":"","version":"Next"},{"title":"Option 1: GitHub Codespaces​","type":1,"pageTitle":"👐 Setup dev environment","url":"/vector-search-lab/docs/getting-started/dev-env-setup#option-1-github-codespaces","content":" You will be working in a Jupyter Notebook in a GitHub Codespace throughout this lab. A codespace is a cloud-hosted, containerized development environment that comes pre-configured with all the tools you need to run this lab.  Navigate to this link. You will be prompted to sign into GitHub if you haven't already. Once signed in, click the Create new codespace button to create a new codespace.    Let it run for a few seconds as it prepares your environment. It will clone the repository, prepare the container, and run the installation scripts. Once the environment is built, you should see a list of files appear under the Explorer.  In the left navigation bar of the IDE, click on the file named vector-search-lab.ipynb to open the Jupyter Notebook for this lab.    Next, select the Python interpreter by clicking Select Kernel at the top right of the IDE.    In the modal that appears, click Python environments... and select the interpreter that is marked as Recommended or Global Env.      That's it! You're ready for the lab!  ","version":"Next","tagName":"h2"},{"title":"Option 2: Run locally​","type":1,"pageTitle":"👐 Setup dev environment","url":"/vector-search-lab/docs/getting-started/dev-env-setup#option-2-run-locally","content":" caution During the lab, we will use GitHub Codespaces. These instructions are here just in case you can't use Codespaces or if you really, really, really want a local installation.  If you want to run the notebook locally, follow the steps below:  Clone the GitHub repo for this lab by executing the following command from the terminal:  git clone https://github.com/mongodb-developer/genai-devday-notebooks.git   cd into the cloned directory:  cd genai-devday-notebooks   Create and activate a Python virtual environment:  python -m venv mongodb-ai-rag-lab source mongodb-ai-rag-lab/bin/activate   Install the dependencies for this lab:  pip install -r requirements.txt   Install and launch Jupyter Notebook:  pip install notebook jupyter notebook   In the browser tab that pops up, open the file named vector-search-lab.ipynb.   ","version":"Next","tagName":"h2"},{"title":"📘 Running Jupyter Notebooks","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/getting-started/jupyter-notebooks","content":"","keywords":"","version":"Next"},{"title":"Cells​","type":1,"pageTitle":"📘 Running Jupyter Notebooks","url":"/vector-search-lab/docs/getting-started/jupyter-notebooks#cells","content":" Cells in a Jupyter notebook are a modular unit of code or text that you can execute and view outputs for.  ","version":"Next","tagName":"h2"},{"title":"Running a cell​","type":1,"pageTitle":"📘 Running Jupyter Notebooks","url":"/vector-search-lab/docs/getting-started/jupyter-notebooks#running-a-cell","content":" To run a cell in a Jupyter notebook, hover over it and click the Run icon that appears against the cell.    When a cell is running, you will see a loading spinner in the bottom left corner of the cell.    ","version":"Next","tagName":"h2"},{"title":"Successful cell runs​","type":1,"pageTitle":"📘 Running Jupyter Notebooks","url":"/vector-search-lab/docs/getting-started/jupyter-notebooks#successful-cell-runs","content":" When a cell is finished running successfully, you will see a green check mark appear in the bottom left corner of the cell.    ","version":"Next","tagName":"h2"},{"title":"Erroneous cell runs​","type":1,"pageTitle":"📘 Running Jupyter Notebooks","url":"/vector-search-lab/docs/getting-started/jupyter-notebooks#erroneous-cell-runs","content":" If an error occurred while running a cell, you will see a red cross appear in the bottom left corner of the cell, and also an error traceback after the cell.    To fix errors, you may need to update previous cells. If you do, re-run all the cells following the one(s) you updated.  ","version":"Next","tagName":"h2"},{"title":"Interrupting a cell​","type":1,"pageTitle":"📘 Running Jupyter Notebooks","url":"/vector-search-lab/docs/getting-started/jupyter-notebooks#interrupting-a-cell","content":" To interrupt a running cell, click the Stop icon that you see against the cell while it is running.    warning The UI might differ slightly if you are running Jupyter Notebooks in a different IDE. Refer to the appropriate documentation if running the notebook in a different environment. ","version":"Next","tagName":"h2"},{"title":"👐 Setup prerequisites","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/getting-started/setup-pre-reqs","content":"👐 Setup prerequisites Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 1: Setup prerequisites section in the notebook. The answers for code blocks in this section are as follows: CODE_BLOCK_1 Answer collection = mongodb_client[DB_NAME][COLLECTION_NAME] ","keywords":"","version":"Next"},{"title":"📘 Embeddings","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/key-concepts/embeddings","content":"","keywords":"","version":"Next"},{"title":"Vector​","type":1,"pageTitle":"📘 Embeddings","url":"/vector-search-lab/docs/key-concepts/embeddings#vector","content":" A vector is an array of numbers that represent magnitude and direction in a multi-dimensional space.  ","version":"Next","tagName":"h2"},{"title":"Embeddings​","type":1,"pageTitle":"📘 Embeddings","url":"/vector-search-lab/docs/key-concepts/embeddings#embeddings","content":" Embeddings are vectors that represent a piece of information, such as text, images, audio, video etc. Embeddings capture semantic qualities of the data i.e. characteristics that capture the meaning or essence of it.  This way, if you plot data in this multi-dimensional vector space, semantically similar data, or data with similar meaning ends up close to each other.  ","version":"Next","tagName":"h2"},{"title":"Embedding models​","type":1,"pageTitle":"📘 Embeddings","url":"/vector-search-lab/docs/key-concepts/embeddings#embedding-models","content":" Embedding models are specialized machine learning models that have been trained to convert a piece of information to these numerical encodings.  The embedding model you choose determines the number of elements in the embedding vectors, and consequently the number of dimensions required to represent them in vector space.  Embedding models vary depending on how the model was trained. Therefore, different models offer different advantages depending on your data and use case. While text embedding models are widely used, embedding models also exist for other types of data such as images, audio, and multimodal content. ","version":"Next","tagName":"h2"},{"title":"👐 MongoDB Atlas setup","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/getting-started/mongodb-setup","content":"👐 MongoDB Atlas setup In this lab, you will learn how to use MongoDB Atlas as a knowledge base as well as a memory provider for a RAG-based documentation chatbot. To use MongoDB Atlas, you will need to create an account, a free cluster and obtain the connection string to connect to your cluster. Follow these steps to get set up: Register for a free MongoDB Atlas account Create a new database cluster Obtain the connection string for your database cluster","keywords":"","version":"Next"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/intro","content":"Introduction Lab goals\tGo from a vector search beginner to proWhat you'll learn\tWhat is vector search? How vector search works Perform semantic search queries using Mongo Atlas Vector Search Ways to optimize your vector search queries Time to complete\t90 mins In the navigation bar and in some pages, you will notice some icons. Here is their meaning: Icon\tMeaning\tDescription📘\tLecture material\tIf you are following along in an instructor-led session, they probably have covered this already. 👐\tHands-on content\tGet ready to do some hands-on work. You should follow these steps. 📚\tDocumentation\tReference documentation for hands-on portions of the lab. 🦹\tAdvanced content\tThis content isn't covered during the lab, but if you're interested in learning more, you can check it out.","keywords":"","version":"Next"},{"title":"👐 Changing the similarity metric","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/optimizing-vector-search/similarity-functions","content":"👐 Changing the similarity metric The similarity metric determines how nearest neighbors are calculated, and consequently what items are retrieved during vector search. To change the similarity metric for vector search, you just need to update the similarity field in the vector search index definition. Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 8: Changing the similarity metric section in the notebook to experiment with a different similarity metric for vector search. The answers for code blocks in this section are as follows: CODE_BLOCK_15 Answer { &quot;name&quot;: ATLAS_VECTOR_SEARCH_INDEX_NAME, &quot;type&quot;: &quot;vectorSearch&quot;, &quot;definition&quot;: { &quot;fields&quot;: [ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;: 512, &quot;similarity&quot;: &quot;dotProduct&quot;, }, ] }, } ","keywords":"","version":"Next"},{"title":"📘 Lecture notes","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/optimizing-vector-search/lecture-notes","content":"","keywords":"","version":"Next"},{"title":"Adding pre-filters to vector search​","type":1,"pageTitle":"📘 Lecture notes","url":"/vector-search-lab/docs/optimizing-vector-search/lecture-notes#adding-pre-filters-to-vector-search","content":"   Pre-filtering allows you to filter the vector search results based on certain business logic, recency etc. In MongoDB, vector search pre-filtering works as follows:  First, the filters are applied to your complete corpus to produce a filtered set of documentsIf the number of filtered documents is less than the number of vectors or results to be returned, an exact nearest neighbor (ENN) search is performedIf the number of filtered documents is more than the number of documents to be returned, an approximate nearest neighbor (ANN) search is performed and when the HNSW graph is traversed, it only considers doc IDs that are present in this filtered set  This way, as long as the filters aren't too restrictive, pre-filtering can improve the latency as well as accuracy of the vector search.  To add pre-filters to vector search in MongoDB, you need to do the following:  Update the vector search index to include the appropriate filter fields, for example:  { &quot;fields&quot;:[ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;: 1536, &quot;similarity&quot;: &quot;cosine&quot; }, { &quot;type&quot;: &quot;filter&quot;, &quot;path&quot;: &quot;pages&quot; }, ... ] }   Update the $vectorSearch stage in the aggregation pipeline definition to include the pre-filters, for example:  [ { &quot;$vectorSearch&quot;: { &quot;index&quot;: &quot;vector_index&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;filter&quot;: {&quot;pages&quot;: 100}, &quot;queryVector&quot;: [0.02421053, -0.022372592,...], &quot;numCandidates&quot;: 150, &quot;limit&quot;: 10 } }, { &quot;$project&quot;: { &quot;_id&quot;: 0, &quot;Content&quot;: 1, &quot;score&quot;: {&quot;$meta&quot;: &quot;vectorSearchScore&quot;} } } ]   ","version":"Next","tagName":"h2"},{"title":"Changing the similarity metric for vector search​","type":1,"pageTitle":"📘 Lecture notes","url":"/vector-search-lab/docs/optimizing-vector-search/lecture-notes#changing-the-similarity-metric-for-vector-search","content":" The similarity metric determines how nearest neighbors are calculated, and consequently what items are retrieved during vector search. MongoDB Atlas Vector Search supports the following metrics:  euclidean: Useful when differences in numerical values is meaningfulcosine: Useful when only relative relationships matterdotProduct: If you want to emphasize not only the similarity in vector space but also on dominant features  To change the similarity metric for vector search, simply update the similarity field in the vector search index definition.  Refer to our documentation to learn more about the different metrics.  ","version":"Next","tagName":"h2"},{"title":"Vector quantization​","type":1,"pageTitle":"📘 Lecture notes","url":"/vector-search-lab/docs/optimizing-vector-search/lecture-notes#vector-quantization","content":" Quantization is the process of shrinking full-fidelity vectors into fewer bits. This can help reduce the storage and memory requirements for vector embeddings. MongoDB Atlas Vector Search supports two types of quantization:  scalar: Takes each vector dimension and buckets it into a smaller set of discrete integersbinary: Sets each vector dimension to a binary value based on a threshold  To enable vector auto-quantization on your embeddings, simply set the quantization field to one of the above supported quantization types in the vector search index definition, for example:  { &quot;fields&quot;:[ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;:512, &quot;similarity&quot;: &quot;cosine&quot;, &quot;quantization&quot;: &quot;scalar&quot; }, ... ] }   Refer to our documentation to learn more about vector quantization. ","version":"Next","tagName":"h2"},{"title":"📘 Vector Search","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/key-concepts/vector-search","content":"","keywords":"","version":"Next"},{"title":"Vector search​","type":1,"pageTitle":"📘 Vector Search","url":"/vector-search-lab/docs/key-concepts/vector-search#vector-search","content":" Vector search, a.k.a. semantic search is an information retrieval technique that retrieves data based on intent or meaning.  Unlike traditional full-text search which finds keyword matches, vector search uses embeddings to find items closest to your search query in multi-dimensional vector space. The closer the embeddings are to your query, the more similar they are in meaning.  ","version":"Next","tagName":"h2"},{"title":"Vector search in MongoDB​","type":1,"pageTitle":"📘 Vector Search","url":"/vector-search-lab/docs/key-concepts/vector-search#vector-search-in-mongodb","content":" In MongoDB, you can semantically search through your data using MongoDB Atlas Vector Search.  To perform vector search on your data in MongoDB, you need to create a vector search index. An example of a vector search index definition looks as follows:  { &quot;fields&quot;:[ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;: 1536, &quot;similarity&quot;: &quot;cosine&quot; }, { &quot;type&quot;: &quot;filter&quot;, &quot;path&quot;: &quot;pages&quot; }, ... ] }   In the index definition, you specify the path to the embedding field (path), the number of dimensions in the embedding vectors (numDimensions), and a similarity metric that specifies how to determine nearest neighbors in vector space (similarity). You can also index filter fields that allow you to pre-filter on certain metadata to narrow the scope of the vector search.  Vector search in MongoDB takes the form of an aggregation pipeline stage. It always needs to be the first stage in the pipeline and can be followed by other stages to further process the semantic search results. An example pipeline including the $vectorSearch stage is as follows:  [ { &quot;$vectorSearch&quot;: { &quot;index&quot;: &quot;vector_index&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;queryVector&quot;: [0.02421053, -0.022372592,...], &quot;numCandidates&quot;: 150, &quot;filter&quot;: {&quot;pages&quot;: 100}, &quot;limit&quot;: 10 } }, { &quot;$project&quot;: { &quot;_id&quot;: 0, &quot;title&quot;: 1, &quot;score&quot;: {&quot;$meta&quot;: &quot;vectorSearchScore&quot;} } } ]   In this example, you can see a vector search query with a pre-filter. The limit field in the query definition specifies how many documents to return from the vector search.  The $project stage that follows only returns documents with the title field and the similarity score from the vector search. ","version":"Next","tagName":"h2"},{"title":"📘 find()","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/other-search-techniques/find","content":"","keywords":"","version":"Next"},{"title":"Usage Example​","type":1,"pageTitle":"📘 find()","url":"/vector-search-lab/docs/other-search-techniques/find#usage-example","content":" db.collection.find({ &quot;name&quot;: &quot;Alice&quot; })   Refer to our documentation to learn more about find(). ","version":"Next","tagName":"h3"},{"title":"📘 Atlas Search","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/other-search-techniques/atlas-search","content":"","keywords":"","version":"Next"},{"title":"Usage Example​","type":1,"pageTitle":"📘 Atlas Search","url":"/vector-search-lab/docs/other-search-techniques/atlas-search#usage-example","content":" { &quot;$search&quot;: { &quot;index&quot;: &quot;default&quot;, &quot;text&quot;: { &quot;query&quot;: &quot;search term&quot;, &quot;path&quot;: &quot;fieldName&quot; } } }   Refer to our documentation to learn more about Atlas Search. ","version":"Next","tagName":"h3"},{"title":"🦹‍♀️ Hybrid Search","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/other-search-techniques/hybrid-search","content":"🦹‍♀️ Hybrid Search You can combine Atlas Vector Search and Atlas Search queries into a hybrid search for unified results. This approach leverages the strengths of both full-text search and semantic search to deliver more relevant results. Run the cells under 🦹‍♀️ Hybrid Search section in the notebook to try out hybrid search in MongoDB Atlas. Refer to our documentation to learn more about this technique.","keywords":"","version":"Next"},{"title":"👐 Vector quantization","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/optimizing-vector-search/vector-quantization","content":"👐 Vector quantization Vector quantization is a technique to reduce the number of bits required to represent a vector. This can help reduce the storage and memory requirements for vector embeddings. To enable vector auto-quantization on your embeddings, simply set the quantization field to one of the supported quantization types (scalar or binary`) in the vector search index definition. Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 9: Enable vector quantization section in the notebook to enable auto-quantization on your embeddings. The answers for code blocks in this section are as follows: CODE_BLOCK_16 Answer { &quot;name&quot;: ATLAS_VECTOR_SEARCH_INDEX_NAME, &quot;type&quot;: &quot;vectorSearch&quot;, &quot;definition&quot;: { &quot;fields&quot;: [ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;: 512, &quot;similarity&quot;: &quot;cosine&quot;, &quot;quantization&quot;: &quot;scalar&quot;, }, ] }, } ","keywords":"","version":"Next"},{"title":"👐 Pre-filtering","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/optimizing-vector-search/pre-filtering","content":"👐 Pre-filtering Pre-filtering is a technique to optimize vector search by only considering documents that match certain criteria during vector search. Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 7: Adding pre-filters to your vector search section in the notebook to experiment with combining pre-filters with your vector search queries. The answers for code blocks in this section are as follows: CODE_BLOCK_11 Answer { &quot;name&quot;: ATLAS_VECTOR_SEARCH_INDEX_NAME, &quot;type&quot;: &quot;vectorSearch&quot;, &quot;definition&quot;: { &quot;fields&quot;: [ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;: 512, &quot;similarity&quot;: &quot;cosine&quot;, }, {&quot;type&quot;: &quot;filter&quot;, &quot;path&quot;: &quot;year&quot;}, ] }, } CODE_BLOCK_12 Answer {&quot;year&quot;: {&quot;$gte&quot;: 2000}} CODE_BLOCK_13 Answer { &quot;name&quot;: ATLAS_VECTOR_SEARCH_INDEX_NAME, &quot;type&quot;: &quot;vectorSearch&quot;, &quot;definition&quot;: { &quot;fields&quot;: [ { &quot;type&quot;: &quot;vector&quot;, &quot;path&quot;: &quot;embedding&quot;, &quot;numDimensions&quot;: 512, &quot;similarity&quot;: &quot;cosine&quot;, }, {&quot;type&quot;: &quot;filter&quot;, &quot;path&quot;: &quot;year&quot;}, {&quot;type&quot;: &quot;filter&quot;, &quot;path&quot;: &quot;pages&quot;}, ] }, } CODE_BLOCK_14 Answer {&quot;$and&quot;: [{&quot;year&quot;: {&quot;$gte&quot;: 2000}}, {&quot;pages&quot;: {&quot;$lte&quot;: 100}}]} ","keywords":"","version":"Next"},{"title":"👐 Add embeddings to the data","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/perform-semantic-search/add-embeddings","content":"👐 Add embeddings to the data Now that you know how to generate embeddings using the CLIP model, let's add embeddings to the books dataset you previously imported into MongoDB. This is a common scenario you will run into where you might want to update your existing data in MongoDB with embeddings. Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 4: Adding Embeddings to Existing Data in Atlas section in the notebook to add embeddings of the books' cover images to the documents in the books collection. The answers for code blocks in this section are as follows: CODE_BLOCK_3 Answer collection.find({}) CODE_BLOCK_4 Answer get_embedding(content, &quot;image&quot;) CODE_BLOCK_5 Answer {&quot;$set&quot;: {embedding_field: embedding}} CODE_BLOCK_6 Answer collection.update_one(filter, update) ","keywords":"","version":"Next"},{"title":"👐 Create a vector search index","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/perform-semantic-search/create-vector-index","content":"👐 Create a vector search index To retrieve documents from MongoDB using vector search, you must configure a vector search index on the collection into which you ingested your data. You can create vector search indexes using the Atlas web UI, Atlas CLI, Compass, or any MongoDB driver. We'll create a vector search index using the Python driver. Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 5: Create a vector search index section in the notebook to create a vector search index on the books collection. The answers for code blocks in this section are as follows: CODE_BLOCK_7 Answer collection.create_search_index(model=model) To verify that the index was created, navigate to the Overview page in the Atlas UI. In the Clusters section, select your cluster and click Browse collections. Navigate to Search Indexes for the books collection in the mongodb_genai_devday database. The index is ready to use once the status changes from PENDING to READY. Also note the size of the index.","keywords":"","version":"Next"},{"title":"👐 Generate embeddings","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/perform-semantic-search/generate-embeddings","content":"👐 Generate embeddings Let's imagine you're running an online bookstore and want your users to be able to search for books using semantic search. Semantic search allows you to search not just using text, but also other modalities such as images, audio, video etc. In this lab, you will see how to enable search using text as well as images. We will use CLIP, a multimodal embedding model that can handle both images and text. Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 3: Generating Embeddings section in the notebook to see how to embed text and images using the CLIP model. The answers for code blocks in this section are as follows: CODE_BLOCK_2 Answer embedding_model.encode(image).tolist() ","keywords":"","version":"Next"},{"title":"Summary","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/summary","content":"Summary Congratulations! Following this workshop, you have successfully learned: what is vector searchhow vector search workshow to perform vector search queries in MongoDB Atlashow to optimize your vector search queries Here are some resources to help you learn more about MongoDB Atlas Vector Search: Atlas Vector Search OverviewAtlas Vector Search DocumentationMongoDB Developer Center","keywords":"","version":"Next"},{"title":"👐 Import data into MongoDB","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/perform-semantic-search/import-data","content":"👐 Import data into MongoDB Let's first import a dataset to use for this lab. We will use a collection of books. Run the cells under the Step 2: Import data section in the notebook to import the dataset for this lab into a MongoDB collection. To verify that the data has been imported into your MongoDB cluster, navigate to the Overview page in the Atlas UI. In the Clusters section, select your cluster and click Browse collections. Ensure that you see a database called mongodb_genai_devday, and a collection named books under it. Note the number and format of documents in the collection.","keywords":"","version":"Next"},{"title":"👐 Perform semantic search queries","type":0,"sectionRef":"#","url":"/vector-search-lab/docs/perform-semantic-search/run-vector-search-queries","content":"👐 Perform semantic search queries Now let's run some vector search queries against the books collection. Fill in any &lt;CODE_BLOCK_N&gt; placeholders and run the cells under the Step 6: Perform semantic search queries section in the notebook to run vector search queries against your data. The answers for code blocks in this section are as follows: CODE_BLOCK_8 Answer get_embedding(user_query, mode) CODE_BLOCK_9 Answer [ { &quot;$vectorSearch&quot;: { &quot;index&quot;: ATLAS_VECTOR_SEARCH_INDEX_NAME, &quot;queryVector&quot;: query_embedding, &quot;path&quot;: &quot;embedding&quot;, &quot;numCandidates&quot;: 50, &quot;filter&quot;: filter, &quot;limit&quot;: 5, } }, {&quot;$project&quot;: {&quot;_id&quot;: 0, &quot;title&quot;: 1, &quot;score&quot;: {&quot;$meta&quot;: &quot;vectorSearchScore&quot;}}}, ] CODE_BLOCK_10 Answer collection.aggregate(pipeline) ","keywords":"","version":"Next"}],"options":{"id":"default"}}